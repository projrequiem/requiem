{
    "flags": {
        "baro_hgt": "uint32_t",
        "ev_hgt": "uint32_t",
        "ev_pos": "uint32_t",
        "ev_vel": "uint32_t",
        "ev_yaw": "uint32_t",
        "fixed_wing": "uint32_t",
        "fuse_aspd": "uint32_t",
        "fuse_beta": "uint32_t",
        "gnd_effect": "uint32_t",
        "gps": "uint32_t",
        "gps_hgt": "uint32_t",
        "gps_yaw": "uint32_t",
        "gps_yaw_fault": "uint32_t",
        "in_air": "uint32_t",
        "inertial_dead_reckoning": "uint32_t",
        "mag_3D": "uint32_t",
        "mag_aligned_in_flight": "uint32_t",
        "mag_dec": "uint32_t",
        "mag_fault": "uint32_t",
        "mag_field_disturbed": "uint32_t",
        "mag_hdg": "uint32_t",
        "opt_flow": "uint32_t",
        "rng_fault": "uint32_t",
        "rng_hgt": "uint32_t",
        "rng_kin_consistent": "uint32_t",
        "rng_stuck": "uint32_t",
        "synthetic_mag_z": "uint32_t",
        "tilt_align": "uint32_t",
        "vehicle_at_rest": "uint32_t",
        "wind": "uint32_t",
        "wind_dead_reckoning": "uint32_t",
        "yaw_align": "uint32_t"
    },
    "value": "uint32_t",
    "~assert": "{\n\tassert(ekfObj[\"%s\"].IsObject());\n\tassert(ekfObj[\"%s\"][\"flags\"].IsObject());assert(ekfObj[\"%s\"][\"flags\"][\"tilt_align\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"yaw_align\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"gps\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"opt_flow\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_hdg\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_3D\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_dec\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"in_air\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"wind\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"baro_hgt\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"rng_hgt\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"gps_hgt\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"ev_pos\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"ev_yaw\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"ev_hgt\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"fuse_beta\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_field_disturbed\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"fixed_wing\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_fault\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"fuse_aspd\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"gnd_effect\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"rng_stuck\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"gps_yaw\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"mag_aligned_in_flight\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"ev_vel\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"synthetic_mag_z\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"vehicle_at_rest\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"gps_yaw_fault\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"rng_fault\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"inertial_dead_reckoning\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"wind_dead_reckoning\"].IsUint());assert(ekfObj[\"%s\"][\"flags\"][\"rng_kin_consistent\"].IsUint());}",
    "~load": "{\n\tassert(ekfObj[\"%s\"].IsObject());\n\tassert(ekfObj[\"%s\"][\"flags\"].IsObject());\n\trapidjson::Value& structObj = ekfObj[\"%s\"][\"flags\"];%s.flags.tilt_align = structObj[\"tilt_align\"].GetUint();\n%s.flags.yaw_align = structObj[\"yaw_align\"].GetUint();\n%s.flags.gps = structObj[\"gps\"].GetUint();\n%s.flags.opt_flow = structObj[\"opt_flow\"].GetUint();\n%s.flags.mag_hdg = structObj[\"mag_hdg\"].GetUint();\n%s.flags.mag_3D = structObj[\"mag_3D\"].GetUint();\n%s.flags.mag_dec = structObj[\"mag_dec\"].GetUint();\n%s.flags.in_air = structObj[\"in_air\"].GetUint();\n%s.flags.wind = structObj[\"wind\"].GetUint();\n%s.flags.baro_hgt = structObj[\"baro_hgt\"].GetUint();\n%s.flags.rng_hgt = structObj[\"rng_hgt\"].GetUint();\n%s.flags.gps_hgt = structObj[\"gps_hgt\"].GetUint();\n%s.flags.ev_pos = structObj[\"ev_pos\"].GetUint();\n%s.flags.ev_yaw = structObj[\"ev_yaw\"].GetUint();\n%s.flags.ev_hgt = structObj[\"ev_hgt\"].GetUint();\n%s.flags.fuse_beta = structObj[\"fuse_beta\"].GetUint();\n%s.flags.mag_field_disturbed = structObj[\"mag_field_disturbed\"].GetUint();\n%s.flags.fixed_wing = structObj[\"fixed_wing\"].GetUint();\n%s.flags.mag_fault = structObj[\"mag_fault\"].GetUint();\n%s.flags.fuse_aspd = structObj[\"fuse_aspd\"].GetUint();\n%s.flags.gnd_effect = structObj[\"gnd_effect\"].GetUint();\n%s.flags.rng_stuck = structObj[\"rng_stuck\"].GetUint();\n%s.flags.gps_yaw = structObj[\"gps_yaw\"].GetUint();\n%s.flags.mag_aligned_in_flight = structObj[\"mag_aligned_in_flight\"].GetUint();\n%s.flags.ev_vel = structObj[\"ev_vel\"].GetUint();\n%s.flags.synthetic_mag_z = structObj[\"synthetic_mag_z\"].GetUint();\n%s.flags.vehicle_at_rest = structObj[\"vehicle_at_rest\"].GetUint();\n%s.flags.gps_yaw_fault = structObj[\"gps_yaw_fault\"].GetUint();\n%s.flags.rng_fault = structObj[\"rng_fault\"].GetUint();\n%s.flags.inertial_dead_reckoning = structObj[\"inertial_dead_reckoning\"].GetUint();\n%s.flags.wind_dead_reckoning = structObj[\"wind_dead_reckoning\"].GetUint();\n%s.flags.rng_kin_consistent = structObj[\"rng_kin_consistent\"].GetUint();\n}",
    "~serialize": "\n{\n\trapidjson::Value structObj(rapidjson::kObjectType);\nstructObj.SetObject();\n\trapidjson::Value innerStructObj(rapidjson::kObjectType);\ninnerStructObj.SetObject();\n\tinnerStructObj.AddMember(\"tilt_align\",%s.flags.tilt_align, allocator);\n\tinnerStructObj.AddMember(\"yaw_align\",%s.flags.yaw_align, allocator);\n\tinnerStructObj.AddMember(\"gps\",%s.flags.gps, allocator);\n\tinnerStructObj.AddMember(\"opt_flow\",%s.flags.opt_flow, allocator);\n\tinnerStructObj.AddMember(\"mag_hdg\",%s.flags.mag_hdg, allocator);\n\tinnerStructObj.AddMember(\"mag_3D\",%s.flags.mag_3D, allocator);\n\tinnerStructObj.AddMember(\"mag_dec\",%s.flags.mag_dec, allocator);\n\tinnerStructObj.AddMember(\"in_air\",%s.flags.in_air, allocator);\n\tinnerStructObj.AddMember(\"wind\",%s.flags.wind, allocator);\n\tinnerStructObj.AddMember(\"baro_hgt\",%s.flags.baro_hgt, allocator);\n\tinnerStructObj.AddMember(\"rng_hgt\",%s.flags.rng_hgt, allocator);\n\tinnerStructObj.AddMember(\"gps_hgt\",%s.flags.gps_hgt, allocator);\n\tinnerStructObj.AddMember(\"ev_pos\",%s.flags.ev_pos, allocator);\n\tinnerStructObj.AddMember(\"ev_yaw\",%s.flags.ev_yaw, allocator);\n\tinnerStructObj.AddMember(\"ev_hgt\",%s.flags.ev_hgt, allocator);\n\tinnerStructObj.AddMember(\"fuse_beta\",%s.flags.fuse_beta, allocator);\n\tinnerStructObj.AddMember(\"mag_field_disturbed\",%s.flags.mag_field_disturbed, allocator);\n\tinnerStructObj.AddMember(\"fixed_wing\",%s.flags.fixed_wing, allocator);\n\tinnerStructObj.AddMember(\"mag_fault\",%s.flags.mag_fault, allocator);\n\tinnerStructObj.AddMember(\"fuse_aspd\",%s.flags.fuse_aspd, allocator);\n\tinnerStructObj.AddMember(\"gnd_effect\",%s.flags.gnd_effect, allocator);\n\tinnerStructObj.AddMember(\"rng_stuck\",%s.flags.rng_stuck, allocator);\n\tinnerStructObj.AddMember(\"gps_yaw\",%s.flags.gps_yaw, allocator);\n\tinnerStructObj.AddMember(\"mag_aligned_in_flight\",%s.flags.mag_aligned_in_flight, allocator);\n\tinnerStructObj.AddMember(\"ev_vel\",%s.flags.ev_vel, allocator);\n\tinnerStructObj.AddMember(\"synthetic_mag_z\",%s.flags.synthetic_mag_z, allocator);\n\tinnerStructObj.AddMember(\"vehicle_at_rest\",%s.flags.vehicle_at_rest, allocator);\n\tinnerStructObj.AddMember(\"gps_yaw_fault\",%s.flags.gps_yaw_fault, allocator);\n\tinnerStructObj.AddMember(\"rng_fault\",%s.flags.rng_fault, allocator);\n\tinnerStructObj.AddMember(\"inertial_dead_reckoning\",%s.flags.inertial_dead_reckoning, allocator);\n\tinnerStructObj.AddMember(\"wind_dead_reckoning\",%s.flags.wind_dead_reckoning, allocator);\n\tinnerStructObj.AddMember(\"rng_kin_consistent\",%s.flags.rng_kin_consistent, allocator);\n\tstructObj.AddMember(\"flags\", innerStructObj, allocator);\n\tekfObj.AddMember(\"%s\", structObj, allocator);\n}",
    "~union": true
}